import{TxtType}from"./txtType.min.js";const populateMediumPosts=posts=>{const postsContainer=document.getElementById("medium-posts");posts.forEach((item=>{const postTimelineContentElement=document.createElement("div");postTimelineContentElement.className="medium-individual-post";postTimelineContentElement.innerHTML=`<h5><a href="${item.link}" target="_blank">${item.title}</a></h5>`;postsContainer.appendChild(postTimelineContentElement)}))};const generateWorkExperienceTimeline=data=>{const timelineContainer=document.getElementById("timeline");data.forEach((item=>{const timelineBlock=createTimelineBlock(item,"fa-laptop-code");timelineContainer.appendChild(timelineBlock)}))};const createTimelineBlock=(item,iconClass)=>{const timelineBlock=document.createElement("div");timelineBlock.className="timeline-block";timelineBlock.style.textAlign="center";timelineBlock.innerHTML=`\n        <div class="timeline-ico"><i class="fa ${iconClass}"></i></div>\n        <div class="timeline-header"><h3>${item.role}</h3><p style="text-align: center;">${item.period}</p></div>\n        <div class="timeline-content">\n          <h4>${item.company}</h4>\n          <h5>${item.position}</h5>\n          <p>${item.description.join("<br>")}</p>\n        </div>\n      `;return timelineBlock};const populateAchievements=items=>{const container=document.getElementById("achievements-timeline");items.forEach((item=>{const block=document.createElement("div");block.className="timeline-block";block.innerHTML=`\n          <div class="timeline-ico"><i class="fa fa-trophy"></i></div>\n          <div class="timeline-header"><h3>${item.year}</h3></div>\n          <div class="timeline-content" style="text-align: center; justify-content: center;">\n            <h5>${item.title}</h5>\n            <p>${item.description}<br>${item.source}</p>\n            ${item.link?`<a href="${item.link}" style="color: aqua;" target="_blank">View Publication</a>`:""}\n          </div>\n        `;container.appendChild(block);container.appendChild(document.createElement("br"))}))};const populatePositions=items=>{const container=document.getElementById("positions-timeline");items.forEach((item=>{const block=document.createElement("div");block.className="timeline-block";block.innerHTML=`\n          <div class="timeline-ico"><i class="fa fa-user-tie"></i></div>\n          <div class="timeline-header"><h3>${item.year}</h3></div>\n          <div class="timeline-content" style="text-align: center; justify-content: center;">\n            <h5>${item.title}</h5>\n            <p>${item.description}</p>\n          </div>\n        `;container.appendChild(block);container.appendChild(document.createElement("br"))}))};const populateEducation=items=>{const container=document.getElementById("education-timeline");items.forEach((item=>{const block=document.createElement("div");block.className="timeline-block";const iconClass=item.level==="College"?"fa-user-graduate":"fa-chalkboard-teacher";block.innerHTML=`\n          <div class="timeline-ico"><i class="fa ${iconClass}"></i></div>\n          <div class="timeline-header"><h3>${item.level}</h3><p style="text-align: center;">${item.year}</p></div>\n          <div class="timeline-content" style="text-align: center; justify-content: center;">\n            <h4>${item.institution}</h4>\n            <h5>${item.details}</h5>\n            <p>${item.degree}</p>\n          </div>\n        `;container.appendChild(block);container.appendChild(document.createElement("br"))}))};let generateSocialLinks=(className,links)=>links.map((link=>`\n        <a target="_blank" class="${className}" href="${link.url}"><i class="${link.icon}"></i></a>\n    `)).join("");const generateNavBar=navData=>`\n        <ul>\n          ${navData.map((item=>`\n            <li class="nav-item">\n              <a href="${item.href}" class="nav-link" ${item.target?`target="${item.target}"`:""}>${item.text}</a>\n            </li>\n          `)).join("")}\n        </ul>\n    `;let fetchSocialLinks=async()=>{try{const response=await fetch("json_assets/social_links.json");const linksData=await response.json();const socialTop=document.querySelector(".social-top");if(socialTop){socialTop.innerHTML=generateSocialLinks("contact-icon-top",linksData)}const socialBottom=document.querySelector(".social-bottom");if(socialBottom){socialBottom.innerHTML=generateSocialLinks("contact-icon-bottom",linksData)}}catch(error){console.error("Error fetching social links:",error)}};const populateProfile=data=>{const profileSection=document.querySelector("#introduction .profile-content");const profileHTML=`\n      <div>\n        <img class="profile-image" src="${data.profileImage}" alt="profile-image" />\n      </div>\n      <div>\n        <h1 class="profile-name">${data.name}</h1>\n      </div>\n      <div>\n        <h3 class="profile-subtitle">${data.subtitle}</h3></div>\n      <h2>\n        <a href="#" class="typewrite" data-period="2000"\n          data-type='${JSON.stringify(data.typewriteText)}'>\n          <span class="wrap"></span>\n        </a>\n      </h2>\n    `;profileSection.innerHTML=profileHTML;initTypewriter()};const initializeElement=element=>{const toRotate=element.getAttribute("data-type");const period=element.getAttribute("data-period");if(toRotate){new TxtType(element,JSON.parse(toRotate),period)}};const replaceLinksInText=(text,links)=>{if(!links||links.length===0)return text;links.sort(((a,b)=>b.text.length-a.text.length));links.forEach((link=>{const linkHTML=`<a target="_blank" href="${link.url}" style="color: whitesmoke; text-decoration: none;">${link.text}</a>`;text=text.replace(new RegExp(link.text,"g"),linkHTML)}));return text};export const initTypewriter=()=>{const elements=Array.from(document.getElementsByClassName("typewrite"));elements.forEach(initializeElement)};export const fetchTimelineData=async()=>{try{const workExperienceResponse=await fetch("json_assets/work_experience.json");const workExperienceData=await workExperienceResponse.json();generateWorkExperienceTimeline(workExperienceData);const achievementsResponse=await fetch("json_assets/achievements.json");const achievementsData=await achievementsResponse.json();populateAchievements(achievementsData);const positionsResponse=await fetch("json_assets/positions.json");const positionsData=await positionsResponse.json();populatePositions(positionsData);const educationResponse=await fetch("json_assets/education.json");const educationData=await educationResponse.json();populateEducation(educationData)}catch(error){console.error("Error fetching timeline data:",error)}};export const populateSocialIcons=()=>{document.addEventListener("DOMContentLoaded",(()=>{fetchSocialLinks()}))};export const fetchNavBarData=async()=>{try{const response=await fetch("json_assets/navbar_links.json");const navData=await response.json();const navbar=document.querySelector(".navbar-items");if(navbar){navbar.innerHTML=generateNavBar(navData)}else{console.error("Navbar element not found.")}}catch(error){console.error("Error fetching navigation links:",error)}};export const fetchMediumPosts=async()=>{try{const configResponse=await fetch("json_assets/profile.json");const configData=await configResponse.json();const mediumUsername=configData.mediumUsername;const mediumFeedUrl=`https://medium.com/feed/@${mediumUsername}`;const response=await fetch(`https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(mediumFeedUrl)}`);const data=await response.json();populateMediumPosts(data.items)}catch(error){console.error("Error fetching Medium posts:",error)}};export const fetchProfileData=async()=>{try{const response=await fetch("json_assets/profile.json");const profileData=await response.json();populateProfile(profileData)}catch(error){console.error("Error fetching profile data:",error)}};export const populateAboutSection=async()=>{try{const response=await fetch("json_assets/about.json");const data=await response.json();const headingElement=document.getElementById("about-heading");if(headingElement){headingElement.textContent=data.heading}else{console.error("Heading element not found")}const contentElement=document.getElementById("about-content");if(contentElement){contentElement.innerHTML=data.content.map((item=>{const contentText=replaceLinksInText(item.text,item.links);return`<p>${contentText}</p>`})).join("<br>")}else{console.error("Content element not found")}}catch(error){console.error("Error fetching About Me data:",error)}};export const populateHeadSection=()=>{document.addEventListener("DOMContentLoaded",(async()=>{try{const response=await fetch("json_assets/head_config.json");const config=await response.json();if(config.charset){const metaCharset=document.createElement("meta");metaCharset.setAttribute("charset",config.charset);document.head.appendChild(metaCharset)}if(config.httpEquiv){const metaHttpEquiv=document.createElement("meta");metaHttpEquiv.setAttribute("http-equiv","X-UA-Compatible");metaHttpEquiv.setAttribute("content",config.httpEquiv);document.head.appendChild(metaHttpEquiv)}if(config.favicon){const linkFavicon=document.createElement("link");linkFavicon.setAttribute("rel","shortcut icon");linkFavicon.setAttribute("href",config.favicon);document.head.appendChild(linkFavicon)}if(config.title){document.title=config.title}if(config.description){const metaDescription=document.createElement("meta");metaDescription.setAttribute("name","description");metaDescription.setAttribute("content",config.description);document.head.appendChild(metaDescription)}if(config.author){const metaAuthor=document.createElement("meta");metaAuthor.setAttribute("name","author");metaAuthor.setAttribute("content",config.author);document.head.appendChild(metaAuthor)}if(config.keywords){const metaKeywords=document.createElement("meta");metaKeywords.setAttribute("name","keywords");metaKeywords.setAttribute("content",config.keywords);document.head.appendChild(metaKeywords)}if(config.viewport){const metaViewport=document.createElement("meta");metaViewport.setAttribute("name","viewport");metaViewport.setAttribute("content",config.viewport);document.head.appendChild(metaViewport)}if(config.faviconPath){const linkFaviconPath=document.createElement("link");linkFaviconPath.setAttribute("rel","icon");linkFaviconPath.setAttribute("type",`image/${config.faviconType}`);linkFaviconPath.setAttribute("href",config.faviconPath);document.head.appendChild(linkFaviconPath)}if(config.stylesheets&&Array.isArray(config.stylesheets)){config.stylesheets.forEach((href=>{const linkStylesheet=document.createElement("link");linkStylesheet.setAttribute("rel","stylesheet");linkStylesheet.setAttribute("href",href);document.head.appendChild(linkStylesheet)}))}if(config.scripts&&Array.isArray(config.scripts)){config.scripts.forEach((src=>{const script=document.createElement("script");script.setAttribute("src",src);script.setAttribute("crossorigin","anonymous");document.head.appendChild(script)}))}}catch(error){console.error("Error fetching head configuration:",error)}}))};